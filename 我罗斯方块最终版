#include<bits/stdc++.h>
#include<stdlib.h>
#include<time.h>
#include<windows.h>
#include<conio.h>
using namespace std;

struct Face  
{
    int data[29][60];    //代表地图上每个块的数值，为2是墙，为1是方块，为0是空格
    int color[29][60];   //地图上对应方块的颜色
};

class draw{  //定义渲染类 
	protected:
		struct Face face;  
		struct Face face1;
	public:
		void gotoxy(int x,int y);  //移动光标
		int color(int ch);   //颜色
		void hidden();  //隐藏光标
		void inter_face();  //初始化界面	
};

void draw::inter_face()  //定义初始化界面
{   int i,j;
    for(i=0;i<29;i++)  //宽为29，长为60 
    {   for(j=0;j<60;j++)
        {   if(j==0 || j==19 || j==29 || j==30 || j==49 || j==59) //建墙 
            {   face.data[i][j]=2;
            	face1.data[i][j]=2;
                gotoxy(i,2*j);
                cout<<"■";
            }
            else if(i==28)	//最底下一行设置为1，方便之后下落的判断 
            {   face.data[i][j]=1;   
            	face1.data[i][j]=1;
                gotoxy(i,2*j);
                cout<<"■";
            }
            else  //其余的都为空 
			{
            face.data[i][j]=0;
            face1.data[i][j]=0;
            }
        }
    }
    gotoxy(11,45);
    cout<<"傻der"; 
    
    gotoxy(13,45);
    cout<<"左移：A";

    gotoxy(15,45);
    cout<<"右移：D";
    
    gotoxy(17,45);
    cout<<"加速下落：S";

    gotoxy(19,45);
    cout<<"旋转：W";

    gotoxy(21,45);
    cout<<"退出: ESC";
    
    gotoxy(11,104);
    cout<<"傻妞";
    
    gotoxy(13,104);
    cout<<"左移: ←";
    
    gotoxy(15,104);
    cout<<"右移: →";
    
    gotoxy(17,104);
    cout<<"加速下落: ↓";
    
    gotoxy(19,104);
    cout<<"旋转: ↑";
}

void draw::gotoxy(int x,int y) //移动坐标
{
    COORD coord;
    coord.X=y;
    coord.Y=x;
    SetConsoleCursorPosition( GetStdHandle( STD_OUTPUT_HANDLE ), coord );
}

void draw::hidden()  //隐藏光标
{
  HANDLE hOut = GetStdHandle(STD_OUTPUT_HANDLE);
  CONSOLE_CURSOR_INFO cci;
  GetConsoleCursorInfo(hOut,&cci);
  cci.bVisible=0;//赋1为显示，赋0为隐藏
  SetConsoleCursorInfo(hOut,&cci);
}

int draw::color(int ch)  //定义颜色 
{
    switch(ch)
    {
    case 0: ch=9;break;
    case 1:
    case 2: ch=12;break;
    case 3:
    case 4: ch=14;break;
    case 5: ch=10;break;
    case 6: ch=13;break;
    default: ch=7;break;
    }
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), ch);        //更改文字颜色
    return 0;
}

typedef struct Diamonds
{   int space[4][4];        //4*4矩阵，为1为方块，0为空
}Dia;

class block{ //定义方块类 
	protected:
		Dia block[7][4];  //一维基础7个方块，二维表示4个旋转次数
		int temp[4][4];
	public:
		void init_dia(){
    		int i,j,k,z;
    		for(i=0;i<3;i++)
        		block[0][0].space[1][i]=1;
    			block[0][0].space[2][1]=1;     //土形
    		for(i=1;i<4;i++)
       			block[1][0].space[i][1]=1;
    			block[1][0].space[1][2]=1;    //L形--1
			for(i=1;i<4;i++)
       			block[2][0].space[i][2]=1;
    			block[2][0].space[1][1]=1;    //L形--2
			for(i=0;i<2;i++)
    	{   	block[3][0].space[1][i]=1;
        		block[3][0].space[2][i+1]=1; //Z形--1

        		block[4][0].space[1][i+1]=1;
        		block[4][0].space[2][i]=1;  //Z形--2

        		block[5][0].space[1][i+1]=1;
        		block[5][0].space[2][i+1]=1;  //田字形
    	}
    		for(i=0;i<4;i++)
        		block[6][0].space[i][2]=1;  //1形 
        //基础7个形状
    		for(i=0;i<7;i++)
    	{
        	for(z=0;z<3;z++)
        {
            for(j=0;j<4;j++)
            {
                for(k=0;k<4;k++)
                {
                  temp[j][k]=block[i][z].space[j][k];
                }   
            }
            for(j=0;j<4;j++)
            {
                for(k=0;k<4;k++)
                {
                  block[i][z+1].space[j][k]=temp[4-k-1][j];
                }   
            }
        }
    } //旋转后的21个形状
}
};

 class game:public block,public draw{  //定义游戏类 
 	protected:
 		int space_c;  //旋转次数
 		int nn;       
 		int space_c1;  //旋转次数
 		int nnn;
	public:
		game(int v,int vv):nn(v),nnn(vv)  //构造函数 
		{
			space_c=0;
			space_c1=0;
		}
		void start_game1()
	{   	int n,ch,t=0,x=0,y=8,i,j;
    		draw_kong(nn,0,4,23);  //用于擦除上一个显示的方块 
    		n=nn;   
    		nn=rand()%7;    //随机生成下一块
    		color(nn);
    		draw_block(nn,0,4,23); //用于画下一个方块 
    		while(1)
    	{   
        	color(n);
        	draw_block(n,space_c,x,y);	//画出图形
        	if(t==0)
           		t=10000;	//控制下降时间（速度） 
       		while(--t)
        	{   if(kbhit()!=0)  //有输入就跳出
                break;  
        	}
        	if(t==0)
        	{
            	if(pd(n,space_c,x+1,y)==1) //判断下一行是否能下降
            	{   draw_kong(n,space_c,x,y);
               		x++;           //向下降落
            	}
            	else //到底则固定方块 
            	{
               	 	for(i=0;i<4;i++)
                	{
                    	for(j=0;j<4;j++)
                    	{ 
                        	if(block[n][space_c].space[i][j]==1)
                        {   
                            face.data[x+i][y+j]=1;
                            face.color[x+i][y+j]=n;
                            while(xc()); //判定是否能消除 
                        }
                    }
                }
                break;
            }
        }
        	else
        	{
            	ch=getch();
            	switch(ch)     //移动
            	{
            case 'a': if(pd(n,space_c,x,y-1)==1)   //判断是否可以移动 //左移 
                       {   draw_kong(n,space_c,x,y);
                           y--;
                       }
                       break;
            case 'd': if(pd(n,space_c,x,y+1)==1)  //右移 
                        {   draw_kong(n,space_c,x,y);
                            y++;
                        }
                        break;
            case 's': if(pd(n,space_c,x+1,y)==1) //加速下降 
                        {   draw_kong(n,space_c,x,y);
                            x++;
                        }
                        break;
            case 'w': if(pd(n,(space_c+1)%4,x+1,y)==1)  //旋转 
                        {   draw_kong(n,space_c,x,y);
                            space_c=(space_c+1)%4;  //记录旋转次数 
                        }
                        break;
            case 27 :   system("cls");    //清屏 
                        gotoxy(29/2,45);
                        printf("---游戏结束!---\n\n");
                        gotoxy(29/2+2,45);
                        printf("---按任意键退出!---\n");
                        getch();
                        exit(0);      //结束循环 
                        break;
            }
        }
    }
}
	 void start_game2()
	{   	int n,ch,t=0,x=0,y=38,i,j;
    		draw_kong(nnn,0,4,53);
    		n=nnn;   
    		nnn=rand()%7;   
    		color(nnn);
    		draw_block(nnn,0,4,53);
    		while(1)
    	{   
        	color(n);
        	draw_block(n,space_c1,x,y);
        	if(t==0)
           		t=10000;
       		while(--t)
        	{   if(kbhit()!=0)
                break;  
        	}
        	if(t==0)
        	{
            	if(pd1(n,space_c1,x+1,y)==1)
            	{   draw_kong(n,space_c1,x,y);
               		x++;         
            	}
            	else
            	{
               	 	for(i=0;i<4;i++)
                	{
                    	for(j=0;j<4;j++)
                    	{ 
                        	if(block[n][space_c1].space[i][j]==1)
                        {   
                            face1.data[x+i][y+j]=1;
                            face1.color[x+i][y+j]=n;
                            while(xc1());
                        }
                    }
                }
                break;
            }
        }
        	else
        	{
            	ch=getch();
            	switch(ch)     
            	{
            case 75: if(pd1(n,space_c1,x,y-1)==1)   
                       {   draw_kong(n,space_c1,x,y);
                           y--;
                       }
                       break;
            case 77: if(pd1(n,space_c1,x,y+1)==1)
                        {   draw_kong(n,space_c1,x,y);
                            y++;
                        }
                        break;
            case 80: if(pd1(n,space_c1,x+1,y)==1)
                        {   draw_kong(n,space_c1,x,y);
                            x++;
                        }
                        break;
            case 72: if(pd1(n,(space_c1+1)%4,x+1,y)==1)
                        {   draw_kong(n,space_c1,x,y);
                            space_c1=(space_c1+1)%4;
                        }
                        break;
            case 27 :   system("cls");
                        gotoxy(29/2,45);
                        printf("---游戏结束!---\n\n");
                        gotoxy(29/2+2,45);
                        printf("---按任意键退出!---\n");
                        getch();
                        exit(0);
                        break;
            }
        }
    }
}
     int xc();
     int xc1();
	 int pd(int n,int space_c,int x,int y);
	 int pd1(int n,int space_c,int x,int y);
	 void draw_kong(int type,int space_c,int a,int b);
	 void draw_block(int type,int space_c,int a,int b);
	 void addline(struct Face *t);
	 void addline1(struct Face *t);
};

 int game::xc()  //消除
{
    int i,j,k,sum;
    for(i=27;i>4;i--)
    {
        sum=0;
        for(j=1;j<19;j++)
        {
            sum+=face.data[i][j];   //记录某行总格数 
        }
        if(sum==0)
            break;
        if(sum==18)   //满一行，减掉
        {   
            color(8);
            for(j=1;j<19;j++)
            {
                face.data[i][j]=0;
                gotoxy(i,2*j);
                cout<<" ";
            }
            addline1(&face1); //此消彼长 
            for(j=i;j>1;j--)
            {   sum=0;
                for(k=1;k<19;k++)
                {
                    sum+=face.data[j-1][k]+face.data[j][k];
                    face.data[j][k]=face.data[j-1][k];
                    if(face.data[j][k]==0)
                    {
                        gotoxy(j,2*k);
                        cout<<"  ";
                    }
                    else
                    {
                        gotoxy(j,2*k);
                        color(face.color[j][k]);
                        cout<<"■";  //消除之后剩余的方块
                    }
                }
                if(sum==0)
                    return 1;
            }
        }
    }
      for(i=1;i<19;i++)
    {
        if(face.data[1][i]==1)
        {
            char n;
            Sleep(10);  //延时判断到顶
            system("cls");
            color(7);
            gotoxy(29/2,50);
            cout<<"傻妞胜利!!"<<endl;
            exit(0);
        }       
    }
    return 0;
}

 int game::xc1()  
{
    int i,j,k,sum;
    for(i=27;i>4;i--)
    {
        sum=0;
        for(j=31;j<49;j++)
        {
            sum+=face1.data[i][j];   
        }
        if(sum==0)
            break;
        if(sum==18)  
        {   
            color(8);
            for(j=31;j<49;j++)
            {
                face1.data[i][j]=0;
                gotoxy(i,2*j);
                cout<<"  ";
            }
            addline(&face);
            for(j=i;j>1;j--)
            {   sum=0;
                for(k=31;k<49;k++)
                {
                    sum+=face1.data[j-1][k]+face1.data[j][k];
                    face1.data[j][k]=face1.data[j-1][k];
                    if(face1.data[j][k]==0)
                    {
                        gotoxy(j,2*k);
                        cout<<"  ";
                    }
                    else
                    {
                        gotoxy(j,2*k);
                        color(face1.color[j][k]);
                        cout<<"■";  //消除之后剩余的方块
                    }
                }
                if(sum==0)
                    return 1;
            }
        }
    }
      for(i=31;i<49;i++)
    {
        if(face1.data[1][i]==1)
        {
            char n;
            Sleep(10);  //延时判断到顶
            system("cls");
            color(7);
            gotoxy(29/2,50);
            cout<<"傻der胜利!!"<<endl;
            exit(0);
        }       
    }
    return 0;
}

void game::addline(struct Face *t){  //定义增加垃圾行的操作 
	int i,j;
	for(i=1;i<=27;i++)  //将整体画布坐标上移
		{
				for(j=1;j<19;j++)
			{
				t->data[i-1][j]=t->data[i][j];
				t->color[i-1][j]=t->color[i][j];
			}
		}
		    for(i=0;i<=27;i++)  //将全部方块都清空
		{
				for(j=1;j<19;j++)
			{
			gotoxy(i,j*2);
			cout <<" ";
			gotoxy(i,j*2+1);
			cout <<" ";
			}
		}
			srand(time(NULL));   //根据不同时间生成不同的种子
			int deadline=rand()%17+8;  //随机产生生成行的方块数
			for(i=1;i<=18;i++)
				t->data[27][i]=0; //使最底下一行为空 
			for(i=1;i<=deadline;i++){
				int k=rand()%18+1;
				if(t->data[27][k]==0){
				t->data[27][k]+=1;
				t->color[27][k]=0;}
			}
			for(i=0;i<=27;i++)  //重新画画布 
		{
				for(j=1;j<19;j++)
			{
			if(t->data[i][j]==1)
			{
				gotoxy(i,j*2);
				color(t->color[i][j]);
				cout<<"■";
			} 
			else
			{
				gotoxy(i,j*2);
				cout <<"  ";
			}
			}
		}
}

void game::addline1(struct Face *t){
	int i,j;
	for(i=1;i<=27;i++)  //将整体画布坐标上移
		{
				for(j=32;j<49;j++)
			{
				t->data[i-1][j]=t->data[i][j];
				t->color[i-1][j]=t->color[i][j];
			}
		}
		    for(i=0;i<=27;i++)  //将全部方块都清空
		{
				for(j=32;j<49;j++)
			{
			gotoxy(i,j*2);
			cout <<" ";
			gotoxy(i,j*2+1);
			cout <<" ";
			}
		}
			srand(time(NULL));  //根据不同时间生成不同的种子
			int deadline=rand()%17+8;  //随机产生生成行的方块数
			for(i=32;i<49;i++)
				t->data[27][i]=0;
			for(i=1;i<=deadline;i++){
				int k=rand()%49+32;
				if(t->data[27][k]==0){
				t->data[27][k]+=1;
				t->color[27][k]=0;}
			}
			for(i=0;i<=27;i++)  //重新画画布 
		{
				for(j=32;j<49;j++)
			{
			if(t->data[i][j]==1)
			{
				gotoxy(i,j*2);
				color(t->color[i][j]);
				cout<<"■";
			} 
			else
			{
				gotoxy(i,j*2);
				cout <<"  ";
			}
			}
		}
}

int game::pd(int n,int space_c,int x,int y)  //判断能否继续向下
{
    int i,j;
    for(i=0;i<4;i++)
    {
        for(j=0;j<4;j++)
        {
           if(block[n][space_c].space[i][j]==0)
               continue;
           else if(face.data[x+i][y+j]==2||face.data[x+i][y+j]==1)
               return 0;
        }
    }
    return 1;
}

int game::pd1(int n,int space_c,int x,int y)  //判断能否继续向下
{
    int i,j;
    for(i=0;i<4;i++)
    {
        for(j=0;j<4;j++)
        {
           if(block[n][space_c].space[i][j]==0)
               continue;
           else if(face1.data[x+i][y+j]==2||face1.data[x+i][y+j]==1)
               return 0;
        }
    }
    return 1;
}

void game::draw_kong(int type,int space_c,int x,int y) //画空方块 
{
    int i,j;
    for(i=0;i<4;i++)
    {
        for(j=0;j<4;j++)
        {
            gotoxy(x+i,2*(y+j));
            if(block[type][space_c].space[i][j]==1)
            cout<<"  ";
        }
    }
}

void game::draw_block(int type,int space_c,int x,int y) //画方块 
{
    int i,j;
    for(i=0;i<4;i++)
    {
        for(j=0;j<4;j++)
        {
            gotoxy(x+i,2*(y+j));
            if(block[type][space_c].space[i][j]==1)
            cout<<"■";
        }
    }
}

int main(){
	system("cls");
    system("title 我罗斯方块");
    system("mode con cols=120 lines=30"); 
    srand(time(NULL));
    int ans=rand()%7;
    int ans1=rand()%7;
    game player(ans,ans1);
    player.inter_face();
    player.hidden();
    player.init_dia(); 
    while(1)
    {
        player.start_game1(); //玩家1 
        player.start_game2(); //玩家2 
    }
    system("pause");
}
